// Code generated by sqlc. DO NOT EDIT.
// source: borrow.sql

package database

import (
	"context"
	"database/sql"
)

const createBorrowedBook = `-- name: CreateBorrowedBook :one
INSERT INTO borrowed_books (
  book,
  friend
) VALUES (
  $1, $2
) RETURNING id, book, friend, borrowed_date, returned_date, created_at, updated_at
`

type CreateBorrowedBookParams struct {
	Book   int32 `json:"book"`
	Friend int32 `json:"friend"`
}

func (q *Queries) CreateBorrowedBook(ctx context.Context, arg CreateBorrowedBookParams) (BorrowedBook, error) {
	row := q.db.QueryRowContext(ctx, createBorrowedBook, arg.Book, arg.Friend)
	var i BorrowedBook
	err := row.Scan(
		&i.ID,
		&i.Book,
		&i.Friend,
		&i.BorrowedDate,
		&i.ReturnedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBorrowedBook = `-- name: DeleteBorrowedBook :exec
DELETE  FROM borrowed_books WHERE id = $1
`

func (q *Queries) DeleteBorrowedBook(ctx context.Context, id sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteBorrowedBook, id)
	return err
}

const getBorrowedBook = `-- name: GetBorrowedBook :one
SELECT id, book, friend, borrowed_date, returned_date, created_at, updated_at FROM borrowed_books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBorrowedBook(ctx context.Context, id sql.NullInt32) (BorrowedBook, error) {
	row := q.db.QueryRowContext(ctx, getBorrowedBook, id)
	var i BorrowedBook
	err := row.Scan(
		&i.ID,
		&i.Book,
		&i.Friend,
		&i.BorrowedDate,
		&i.ReturnedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBorrowedBooks = `-- name: ListBorrowedBooks :many
SELECT id, book, friend, borrowed_date, returned_date, created_at, updated_at FROM borrowed_books
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBorrowedBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBorrowedBooks(ctx context.Context, arg ListBorrowedBooksParams) ([]BorrowedBook, error) {
	rows, err := q.db.QueryContext(ctx, listBorrowedBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BorrowedBook
	for rows.Next() {
		var i BorrowedBook
		if err := rows.Scan(
			&i.ID,
			&i.Book,
			&i.Friend,
			&i.BorrowedDate,
			&i.ReturnedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBorrowedBook = `-- name: UpdateBorrowedBook :exec
UPDATE borrowed_books
SET returned_date = NOW()
WHERE id = $1
`

func (q *Queries) UpdateBorrowedBook(ctx context.Context, id sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, updateBorrowedBook, id)
	return err
}
